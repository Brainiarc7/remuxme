#!/usr/bin/node

/**
 *   ____  _____ __  __ _   ___  __  ___ ___
 *  |  _ \| ____|  \/  | | | \ \/ / |_ _/ _ \
 *  | |_) |  _| | |\/| | | | |\  /   | | | | |
 *  |  _ <| |___| |  | | |_| |/  \ _ | | |_| |
 *  |_| \_\_____|_|  |_|\___//_/\_(_)___\___/
 *  |_________________________________________
 *
 */

"use strict"

const vorpal = require('vorpal')();
const client_api = require('../').client
const server_api = require('../').server
const config = require('../lib/config.js');
const pretty_cli = require('../lib/pretty-cli.js');

var cmd = {}


cmd.list = vorpal.command('list', 'List remux processes.')
cmd.list.action(function(args, callback) {
  var this_cmd = this
  var client = new client_api()
  client.exec(null, null, function(err, list){
    if (err){
      this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
      if (callback) callback()
    }else{
      this_cmd.log(pretty_cli.chalk.gray.bold("List of remux-ffmpeg services:\n")
        +pretty_cli.processes_table(list).toString()+'\n')
      if (callback) callback()
    }

  })
});

cmd.start = vorpal.command('start <id>', 'Start ffmpeg service.')
cmd.start.action(function(args, callback) {
  var this_cmd = this
  var client = new client_api()
  client.exec('start', args, function(err, list){
    if (err){
      this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
      if (callback) callback()
    }else{
      this_cmd.log(pretty_cli.chalk.gray.bold("List of remux-ffmpeg services:\n")
        +pretty_cli.processes_table(list).toString()+'\n')
      if (callback) callback()
    }
  })
});


cmd.stop = vorpal.command('stop <id>', 'Stop ffmpeg service.')
cmd.stop.action(function(args, callback) {
  var this_cmd = this
  var client = new client_api()
  client.exec('stop', args, function(err, list){
    if (err){
      this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
      if (callback) callback()
    }else{
      this_cmd.log(pretty_cli.chalk.gray.bold("List of remux-ffmpeg services:\n")
        +pretty_cli.processes_table(list).toString()+'\n')
      if (callback) callback()
    }
  })
});


cmd.restart = vorpal.command('restart <id>', 'Restart ffmpeg service.')
cmd.restart.action(function(args, callback) {
  var this_cmd = this
  var client = new client_api()
  client.exec('start', args, function(err, list){
    if (err){
      this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
      if (callback) callback()
    }else{
      this_cmd.log(pretty_cli.chalk.gray.bold("List of remux-ffmpeg services:\n")
        +pretty_cli.processes_table(list).toString()+'\n')
      if (callback) callback()
    }
  })
});


cmd.info = vorpal.command('info <id>', 'Get full information about ffmpeg service.')
cmd.info.action(function(args, callback) {
  var this_cmd = this
  var client = new client_api()
  client.exec('info', args, function(err, list){
    if (err){
      this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
      if (callback) callback()
    }else{
      this_cmd.log(pretty_cli.chalk.blue('List of sets'))
      this_cmd.log(pretty_cli.env_table(list).toString())
      if (callback) callback()
    }
  })
});


//command set
cmd.set = vorpal.command('process set <id> [variable] [value]', 'Set or view ffmpeg-service valiables.')
cmd.set.action(function(args, callback){
  var this_cmd = this
  var client = new client_api()

  if(args.variable != null && args.value == null){
    client.exec('process_get', args, function(err, msg){
      if (err){
        this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
        if (callback) callback()
      }else{
        this_cmd.log(pretty_cli.chalk.blue(`[process]:: ${args.id}; [value of "${args.variable}"]:: ${msg}`))
        if (callback) callback()
      }
    })
  }else if(args.variable != null && args.value != null){
    client.exec('process_set', args, function(err, msg){
      if (err){
        this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
        if (callback) callback()
      }else{
        this_cmd.log(pretty_cli.chalk.blue(msg))
        if (callback) callback()
      }
    })
  }else{
    client.exec('info', args, function(err, list){
      if (err){
        this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
        if (callback) callback()
      }else{
        this_cmd.log(pretty_cli.chalk.blue('List of sets'))
        this_cmd.log(pretty_cli.env_table(list).toString())
        if (callback) callback()
      }
    })
  }
})


//command
cmd.start_server = vorpal.command('server start', 'Start/Restart Remux server.')
cmd.start_server.action(function(args, callback) {
  var this_cmd = this
  var server = new server_api()
  server.start(function(err, msg){
    this_cmd.log(pretty_cli.chalk.gray.bold(msg))
    if (callback) callback()
  })
});

cmd.restart_server = vorpal.command('server restart', 'Restart Remux server.')
cmd.restart_server.action(function(args, callback) {
  var this_cmd = this
  var client = new client_api()
  client.exec('server_restart', args, function(err, msg){
    if (err){
      this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
      if (callback) callback()
    }else{
      this_cmd.log("[server message]:: "+pretty_cli.chalk.gray.bold(msg))
      if (callback) callback()
    }
  })
});

//command info
cmd.stop_server = vorpal.command('server stop', 'Stop Remux server.')
cmd.stop_server.action(function(args, callback) {
  var this_cmd = this
  var client = new client_api()
  client.exec('server_stop', args, function(err, msg){
    if (err){
      this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
      if (callback) callback()
    }else{
      this_cmd.log("[server message]:: "+pretty_cli.chalk.gray.bold(msg))
      if (callback) callback()
    }
  })
});

//command set
cmd.set = vorpal.command('server set [variable] [value]', 'Set or view Remux valiables.')
cmd.set.action(function(args, callback){
  var this_cmd = this
  var client = new client_api()

  if(args.variable != null && args.value == null){
    client.exec('server_get', args, function(err, msg){
      if (err){
        this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
        if (callback) callback()
      }else{
        this_cmd.log(pretty_cli.chalk.blue(`[value of "${args.variable}"]:: ${msg}`))
        if (callback) callback()
      }
    })
  }else if(args.variable != null && args.value != null){
    client.exec('server_set', args, function(err, msg){
      if (err){
        this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
        if (callback) callback()
      }else{
        this_cmd.log(pretty_cli.chalk.blue(msg))
        if (callback) callback()
      }
    })
  }else{
    client.exec('server_listSets', args, function(err, list){
      if (err){
        this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
        if (callback) callback()
      }else{
        this_cmd.log(pretty_cli.chalk.blue('List of sets'))
        this_cmd.log(pretty_cli.env_table(list).toString())
        if (callback) callback()
      }
    })
  }
})




cmd.debug = vorpal.command('__node_process')
cmd.debug.action(function(args, callback){
  this.log(process);
  if (callback) callback()
})


vorpal.log(pretty_cli.chalk.green(`
   ____  _____ __  __ _   ___  __  ___ ___
  |  _ \\| ____|  \\/  | | | \\ \\/ / |_ _/ _ \\
  | |_) |  _| | |\\/| | | | |\\  /   | | | | |
  |  _ <| |___| |  | | |_| |/  \\ _ | | |_| |
  |_| \\_\\_____|_|  |_|\\___//_/\\_(_)___\\___/

`))
vorpal.log(pretty_cli.chalk.gray.bold('For interactive help, type "help".'))
vorpal.log('')

vorpal.execSync('server start')

vorpal
  .delimiter('[#][remux] ')
  .show();
