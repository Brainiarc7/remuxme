#!/usr/bin/node

/**
 *   ____  _____ __  __ _   ___  __  ___ ___
 *  |  _ \| ____|  \/  | | | \ \/ / |_ _/ _ \
 *  | |_) |  _| | |\/| | | | |\  /   | | | | |
 *  |  _ <| |___| |  | | |_| |/  \ _ | | |_| |
 *  |_| \_\_____|_|  |_|\___//_/\_(_)___\___/
 *  |_________________________________________
 *
 */

"use strict"

const vorpal = require('vorpal')();
const client_api = require('../').client
const server_api = require('../').server
const config = require('../lib/config.js');
const pretty_cli = require('../lib/pretty-cli.js');
const socket = require('../lib/client-io');
const moment = require('moment');


var cmd = {}
var connection_source = null
var io = null;

function delimiter(){
    if (connection_source){
        vorpal.delimiter(`[#][remux][${connection_source.name}] `)
    }else{
        vorpal.delimiter('[#][remux][local] ')
    }
}

function socket_connect(){
  if (io) io.socket.disconnect()
  var args = {}

  if (connection_source){
      args.protocol = (connection_source.ssl === true || connection_source.ssl == "true" ?'https':'http')
      args.host = connection_source.host
      args.port = connection_source.port
  }

  io = new socket(args)

  io.on('connect', function(){
    vorpal.log('socket connect\n');
  })
  io.on('connect_error', function(){
    vorpal.log('connect_error\n');
  })
  io.on('connect_timeout', function(){
    vorpal.log('connect_timeout\n');
  })
  io.on('error', function(){
    vorpal.log('error\n');
  })

  io.on('log', function(logmsg){
    vorpal.log(
      '| '+pretty_cli.chalk.gray(moment(logmsg.time).format('MMM Do HH:mm:ss'))+' |',
      pretty_cli.chalk.green.bold(logmsg.name)+' |',
      pretty_cli.chalk.blue.bold(logmsg.data)
    )
  })

  io.connect()
}



cmd.list = vorpal.command('list', 'List remux processes.')
cmd.list.action(function(args, callback) {
  var this_cmd = this
  if (connection_source){
      args.protocol = (connection_source.ssl === true || connection_source.ssl == "true" ?'https':'http')
      args.host = connection_source.host
      args.port = connection_source.port
  }

  var client = new client_api(connection_source)
  client.exec(null, null, function(err, list){
    if (err){
      this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
      if (callback) callback()
    }else{
      this_cmd.log(pretty_cli.chalk.gray.bold("List of remux-ffmpeg services:\n")
        +pretty_cli.processes_table(list).toString()+'\n')
      if (callback) callback()
    }

  })
});

cmd.start = vorpal.command('start <id>', 'Start ffmpeg service.')
cmd.start.action(function(args, callback) {
  var this_cmd = this

  if (connection_source){
      args.protocol = (connection_source.ssl === true || connection_source.ssl == "true" ?'https':'http')
      args.host = connection_source.host
      args.port = connection_source.port
  }

  var client = new client_api(connection_source)

  client.exec('start', args, function(err, list){
    if (err){
      this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
      if (callback) callback()
    }else{
      this_cmd.log(pretty_cli.chalk.gray.bold("List of remux-ffmpeg services:\n")
        +pretty_cli.processes_table(list).toString()+'\n')
      if (callback) callback()
    }
  })
});



cmd.stop = vorpal.command('stop <id>', 'Stop ffmpeg service.')
cmd.stop.action(function(args, callback) {
  var this_cmd = this
  if (connection_source){
      args.protocol = (connection_source.ssl === true || connection_source.ssl == "true" ?'https':'http')
      args.host = connection_source.host
      args.port = connection_source.port
  }

  var client = new client_api(connection_source)
  client.exec('stop', args, function(err, list){
    if (err){
      this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
      if (callback) callback()
    }else{
      this_cmd.log(pretty_cli.chalk.gray.bold("List of remux-ffmpeg services:\n")
        +pretty_cli.processes_table(list).toString()+'\n')
      if (callback) callback()
    }
  })
});


cmd.restart = vorpal.command('restart <id>', 'Restart ffmpeg service.')
cmd.restart.action(function(args, callback) {
  var this_cmd = this
  if (connection_source){
      args.protocol = (connection_source.ssl === true || connection_source.ssl == "true" ?'https':'http')
      args.host = connection_source.host
      args.port = connection_source.port
  }

  var client = new client_api(connection_source)
  client.exec('start', args, function(err, list){
    if (err){
      this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
      if (callback) callback()
    }else{
      this_cmd.log(pretty_cli.chalk.gray.bold("List of remux-ffmpeg services:\n")
        +pretty_cli.processes_table(list).toString()+'\n')
      if (callback) callback()
    }
  })
});


cmd.info = vorpal.command('info <id>', 'Get full information about ffmpeg service.')
cmd.info.action(function(args, callback) {
  var this_cmd = this
  if (connection_source){
      args.protocol = (connection_source.ssl === true || connection_source.ssl == "true" ?'https':'http')
      args.host = connection_source.host
      args.port = connection_source.port
  }

  var client = new client_api(connection_source)
  client.exec('info', args, function(err, list){
    if (err){
      this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
      if (callback) callback()
    }else{
      this_cmd.log(pretty_cli.chalk.blue('List of sets'))
      this_cmd.log(pretty_cli.env_table(list).toString())
      if (callback) callback()
    }
  })
});


cmd.start = vorpal.command('taskset <id> <cpus>', 'Change CPU affinity for working process.')
cmd.start.action(function(args, callback) {
  var this_cmd = this

  if (connection_source){
      args.protocol = (connection_source.ssl === true || connection_source.ssl == "true" ?'https':'http')
      args.host = connection_source.host
      args.port = connection_source.port
  }

  var client = new client_api(connection_source)

  client.exec('cpus', args, function(err, msg){
    if (err){
      this_cmd.log(pretty_cli.chalk.red.bold(err))
      if (callback) callback()
    }else{
      this_cmd.log(msg)
      if (callback) callback()
    }
  })
});


//command set
cmd.set = vorpal.command('process set <id> [variable] [value]', 'Set or view ffmpeg-service valiables.')
cmd.set.action(function(args, callback){
  var this_cmd = this
  if (connection_source){
      args.protocol = (connection_source.ssl === true || connection_source.ssl == "true" ?'https':'http')
      args.host = connection_source.host
      args.port = connection_source.port
  }

  var client = new client_api(connection_source)

  if(args.variable != null && args.value == null){
    client.exec('process_get', args, function(err, msg){
      if (err){
        this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
        if (callback) callback()
      }else{
        this_cmd.log(pretty_cli.chalk.blue(`[process]:: ${args.id}; [value of "${args.variable}"]:: ${msg}`))
        if (callback) callback()
      }
    })
  }else if(args.variable != null && args.value != null){
    client.exec('process_set', args, function(err, msg){
      if (err){
        this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
        if (callback) callback()
      }else{
        this_cmd.log(pretty_cli.chalk.blue(msg))
        if (callback) callback()
      }
    })
  }else{
    client.exec('info', args, function(err, list){
      if (err){
        this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
        if (callback) callback()
      }else{
        this_cmd.log(pretty_cli.chalk.blue('List of sets'))
        this_cmd.log(pretty_cli.env_table(list).toString())
        if (callback) callback()
      }
    })
  }
})


//command
cmd.start_server = vorpal.command('server start', 'Start/Restart Remux server.')
cmd.start_server.action(function(args, callback) {
  var this_cmd = this
  var server = new server_api()
  server.start(function(err, msg){
    this_cmd.log(pretty_cli.chalk.gray.bold(msg))
    if (callback) callback()
  })
});

cmd.restart_server = vorpal.command('server restart', 'Restart Remux server.')
cmd.restart_server.action(function(args, callback) {
  var this_cmd = this
  if (connection_source){
      args.protocol = (connection_source.ssl === true || connection_source.ssl == "true" ?'https':'http')
      args.host = connection_source.host
      args.port = connection_source.port
  }

  var client = new client_api(connection_source)
  client.exec('server_restart', args, function(err, msg){
    if (err){
      this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
      if (callback) callback()
    }else{
      this_cmd.log("[server message]:: "+pretty_cli.chalk.gray.bold(msg))
      if (callback) callback()
    }
  })
});

//command info
cmd.stop_server = vorpal.command('server stop', 'Stop Remux server.')
cmd.stop_server.action(function(args, callback) {
  var this_cmd = this
  if (connection_source){
      args.protocol = (connection_source.ssl === true || connection_source.ssl == "true" ?'https':'http')
      args.host = connection_source.host
      args.port = connection_source.port
  }

  var client = new client_api(connection_source)
  client.exec('server_stop', args, function(err, msg){
    if (err){
      this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
      if (callback) callback()
    }else{
      this_cmd.log("[server message]:: "+pretty_cli.chalk.gray.bold(msg))
      if (callback) callback()
    }
  })
});

//command set
cmd.server_set = vorpal.command('server set [variable] [value]', 'Set or view Remux valiables.')
cmd.server_set.action(function(args, callback){
  var this_cmd = this
  if (connection_source){
      args.protocol = (connection_source.ssl === true || connection_source.ssl == "true" ?'https':'http')
      args.host = connection_source.host
      args.port = connection_source.port
  }

  var client = new client_api(connection_source)
  if(args.variable != null && args.value == null){
    client.exec('server_get', args, function(err, msg){
      if (err){
        this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
        if (callback) callback()
      }else{
        this_cmd.log(pretty_cli.chalk.blue(`[value of "${args.variable}"]:: ${msg}`))
        if (callback) callback()
      }
    })
  }else if(args.variable != null && args.value != null){
    client.exec('server_set', args, function(err, msg){
      if (err){
        this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
        if (callback) callback()
      }else{
        this_cmd.log(pretty_cli.chalk.blue(msg))
        if (callback) callback()
      }
    })
  }else{
    client.exec('server_listSets', args, function(err, list){
      if (err){
        this_cmd.log(pretty_cli.chalk.red.bold('Cannot connect to Remux server. Please try to execute command "server start" and try again.'))
        if (callback) callback()
      }else{
        this_cmd.log(pretty_cli.chalk.blue('List of sets'))
        this_cmd.log(pretty_cli.env_table(list).toString())
        if (callback) callback()
      }
    })
  }
})

cmd.server_local = vorpal.command('connect local', 'Connect to local server.')
cmd.server_local.action(function(args, callback){
    var this_cmd = this
    connection_source = null;
    delimiter()
    this_cmd.log('Remux connection changed to local.')
    if (callback) callback()
})


cmd.server_connect = vorpal.command('connect host <id>', 'Connect to remote server.')
cmd.server_connect.action(function(args, callback){
    var this_cmd = this
    connection_source = config.hosts.info(args.id)
    socket_connect()
    delimiter()
    this_cmd.log(`Remux connection changed to ${connection_source.name}.`)
    if (callback) callback()
})


cmd.server_info = vorpal.command('connect info', 'Info for current Remux host connection.')
cmd.server_info.action(function(args, callback){
    var this_cmd = this

    if (connection_source){
        this_cmd.log(pretty_cli.env_table(connection_source).toString())
    }else{
        this_cmd.log('[info]:: Connected to local Remux server.')
    }

    if (callback) callback()
})


cmd.host_list = vorpal.command('host list', 'List of configured remote hosts.')
cmd.host_list.action(function(args, callback){
    var this_cmd = this
    this_cmd.log(pretty_cli.chalk.gray.bold("List of hosts:\n")
      +pretty_cli.hosts_table(config.hosts.list()).toString()+'\n')
    if (callback) callback()
})


cmd.host_settings = vorpal.command('host settings <id>', 'Get host settings by id.')
cmd.host_settings.action(function(args, callback){
    var this_cmd = this
    this_cmd.log(pretty_cli.env_table(config.hosts.info(args.id)).toString())
    if (callback) callback()
})


cmd.host_add = vorpal.command('host add <name> <ssl> <host> <port> <user> <pass>', 'Add new host.')
cmd.host_add.action(function(args, callback){
    var this_cmd = this
    config.hosts.add(args)
    this_cmd.log(pretty_cli.env_table(config.hosts.info(config.hosts.list().length-1)).toString())
    if (callback) callback()
})


cmd.host_remove = vorpal.command('host remove <id>', 'Remove host configuration.')
cmd.host_remove.action(function(args, callback){
    var this_cmd = this
    this_cmd.log(pretty_cli.chalk.gray.bold("List of hosts:\n")
      +pretty_cli.hosts_table(config.hosts.remove(args.id)).toString()+'\n')
    if (callback) callback()
})


cmd.host_set = vorpal.command('host set <id> <variable> <value>', 'Set host valiable.')
cmd.host_set.action(function(args, callback){
    var this_cmd = this
    this_cmd.log(pretty_cli.chalk.blue(config.hosts.set(args.id, args.variable, args.value)))
    if (callback) callback()
})


cmd.log_start = vorpal.command('log start <id>', 'Attach to log stream for process.')
cmd.log_start.action(function(args, callback){
  var this_cmd = this
  io.join(args.id)
  if (callback) callback()
})


cmd.log_stop = vorpal.command('log stop <id>', 'Disconnect from log stream for process.')
cmd.log_stop.action(function(args, callback){
  var this_cmd = this
  io.leave(args.id)
  if (callback) callback()
})




cmd.debug = vorpal.command('__node_process')
cmd.debug.action(function(args, callback){
  this.log(process);
  if (callback) callback()
})



vorpal.log(pretty_cli.chalk.green(`
   ____  _____ __  __ _   ___  __  ___ ___
  |  _ \\| ____|  \\/  | | | \\ \\/ / |_ _/ _ \\
  | |_) |  _| | |\\/| | | | |\\  /   | | | | |
  |  _ <| |___| |  | | |_| |/  \\ _ | | |_| |
  |_| \\_\\_____|_|  |_|\\___//_/\\_(_)___\\___/

`))
vorpal.log(pretty_cli.chalk.gray.bold('For interactive help, type "help".'))
vorpal.log('')

vorpal.execSync('server start')
setTimeout(function(){
  socket_connect()
},1000)

delimiter()
vorpal.show();
