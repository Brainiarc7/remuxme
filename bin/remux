#!/usr/bin/node

"use strict"

const vorpal = require('vorpal')();
const client_api = require('../').client
const server_api = require('../').server
const config = require('../lib/config.js');
const pretty_cli = require('../lib/pretty-cli.js');

var cmd = {}


cmd.list = vorpal.command('list', 'List remux processes.')
cmd.list.action(function(args, callback) {
  var this_cmd = this
  var client = new client_api()
  client.exec(null, null, function(err, list){
    this_cmd.log("List of remux-ffmpeg services:\n"
      +pretty_cli.processes_table(list.data.list).toString()+'\n')
  })
  callback()
});

cmd.start = vorpal.command('start <id>', 'Start ffmpeg service.')
cmd.start.action(function(args, callback) {
  var this_cmd = this
  var client = new client_api()
  client.exec('start', args, function(err, list){
    this_cmd.log("List of remux-ffmpeg services:\n"
      +pretty_cli.processes_table(list.data.start).toString()+'\n')
  })
  callback()
});


cmd.stop = vorpal.command('stop <id>', 'Stop ffmpeg service.')
cmd.stop.action(function(args, callback) {
  var this_cmd = this
  var client = new client_api()
  client.exec('stop', args, function(err, list){
    this_cmd.log("List of remux-ffmpeg services:\n"
      +pretty_cli.processes_table(list.data.stop).toString()+'\n')
  })
  callback()
});


cmd.restart = vorpal.command('restart <id>', 'Restart ffmpeg service.')
cmd.restart.action(function(args, callback) {
  this.log('not implemented :: in todo')
  callback()
});


cmd.info = vorpal.command('info <id>', 'Get full information about ffmpeg service.')
cmd.info.action(function(args, callback) {
  this.log('not implemented :: in todo')
  callback()
});

//command
cmd.start_server = vorpal.command('server start', 'Start/Restart Remux server.')
cmd.start_server.action(function(args, callback) {
  var this_cmd = this
  var server = new server_api()
  server.start(function(err, msg){
    this_cmd.log(msg)
    callback()
  })
});

cmd.start_reserver = vorpal.command('server restart', 'Restart Remux server.')
cmd.start_reserver.action(function(args, callback) {
  var this_cmd = this
  var server = new server_api()
  server.start(function(err, msg){
    this_cmd.log(msg)
    callback()
  })
});

//command info
cmd.stop_server = vorpal.command('server stop', 'Stop Remux server.')
cmd.stop_server.action(function(args, callback) {
  var this_cmd = this
  var server = new server_api()
  server.stop(function(err, msg){
    this_cmd.log(msg)
    callback()
  })
});

//command set
cmd.set = vorpal.command('set [var] [value]', 'Set or view Remux valiables.')
cmd.set.action(function(args, callback){
  var this_cmd = this
  if(args.var != null && args.value == null){
    this_cmd.log(config.remux.get(args.var))
  }else if(args.var != null && args.value != null){
    this_cmd.log(config.remux.set(args.var, args.value))
  }else{
    this_cmd.log(pretty_cli.env_table(config.remux.list()).toString())
  }

  callback()
})




cmd.debug = vorpal.command('__node_process')
cmd.debug.action(function(args, callback){
  this.log(process);
  callback()
})

vorpal
  .delimiter('[#][remux] ')
  .show();
